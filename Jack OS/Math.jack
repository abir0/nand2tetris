// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array bits;

    /** Initializes the library. */
    function void init() {
        let bits = Array.new(16);
        let bits[0] = 1;
        let bits[1] = 2;
        let bits[2] = 4;
        let bits[3] = 8;
        let bits[4] = 16;
        let bits[5] = 32;
        let bits[6] = 64;
        let bits[7] = 128;
        let bits[8] = 256;
        let bits[9] = 512;
        let bits[10] = 1024;
        let bits[11] = 2048;
        let bits[12] = 4096;
        let bits[13] = 8192;
        let bits[14] = 16384;
        let bits[15] = -32767 - 1;
        return;
    }

    /** Returns the binary ith bit of decimal value x. */
    function int bit(int x, int i) {
        if ((bits[i] & x) = 0) {
            return 0;
        }
        else {
            return 1;
        }
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0){
            return -x;
        }
        else {
            return x;
        }
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int i, sum, shiftedX;
        let sum = 0;
        let shiftedX = x;
        let i = 0;
        while (i < 16) {
            if (Math.bit(y, i) = 0) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        if (y > x) {
            return 0;
        }
        let q = Math.divide(x, 2 * y);
        if ((x - (2 * q * y)) < y) {
            return 2 * q;
        }
        else {
            return (2 * q) + 1;
        }
    }

    /** Returns the integer part of the x to the power y. */
    function int pow(int x, int y) {
        var int mult;
        if (y = 0) {
            return 1;
        }
        let mult = 1;
        while (y > 0) {
            let mult = Math.multiply(x, mult);
            let y = y - 1;
        }
        return mult;
    }


    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, n, i;
        let y = 0;
        let i = 7;
        while (~(i = 0)) {
            let n = (y + Math.pow(2, i)) * (y + Math.pow(2, i));
            if ((n < x) | (n = x)) {
                let y = y + Math.pow(2, i);
            }
            let i = i - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        else {
            return b;
        }
    }
}

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array bits;

    /** Initializes the library. */
    function void init() {
        let bits = Array.new(16);
        let bits[0] = 1;
        let bits[1] = 2;
        let bits[2] = 4;
        let bits[3] = 8;
        let bits[4] = 16;
        let bits[5] = 32;
        let bits[6] = 64;
        let bits[7] = 128;
        let bits[8] = 256;
        let bits[9] = 512;
        let bits[10] = 1024;
        let bits[11] = 2048;
        let bits[12] = 4096;
        let bits[13] = 8192;
        let bits[14] = 16384;
        let bits[15] = 16384 + 16384;
        return;
    }

    /** Returns the binary ith bit of decimal value x. */
    function boolean bit(int x, int i) {
        return ~(x & Math.pow2(i));
    }

    /** Returns the 2 to the power x. */
    function int pow2(int x) {
        return bits[x];
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        return Math.max(x, -x);
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int i, sum, shiftedX;

        let sum = 0;
        let shiftedX = x;
        let i = 0;

        while (i < 16) {
            if (Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int neg_x, neg_y;
        var int q;
        var int result;

        let neg_x = x < 0;
        let neg_y = y < 0;
        let x = Math.abs(x);
        let y = Math.abs(y);

        if( y > x ) {
            return 0;
        }
        let q = Math.divide(x, y + y);
        if (x - (2 * q * y) < y ) {
            let result = q + q;
        }
        else {
            let result = q + q + 1;
        }

        if (neg_x = neg_y) {
            return result;
        }
        else {
            return -result;
        }
    }

    /** Returns the remainder part of x/y */
    function int mod(int x, int y) {
        var int q;

        let q = Math.divide(x, y);
        return x - (q * y);
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int i, y;
        var int approx;
        var int approx_squared;

        let y = 0;
        let i = 7;
        while (~(i < 0)) {
            let approx = y + Math.pow2(i);
            let approx_squared = approx * approx;
            if (~(approx_squared > x) & (approx_squared > 0)) {    // in case of overflow
                let y = approx;
            }
            let i = i - 1;
        }
        return y;

    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        else {
            return b;
        }
    }
}
